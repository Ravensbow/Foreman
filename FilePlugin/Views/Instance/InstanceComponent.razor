@inject IHttpClientFactory http

@if(instance != null && file != null)
{
    <Foreman.PluginManager.Components.InstanceComponent CourseId="instance.CourseId" MenuOptions="menu" Icon="@Config.pluginIcon" DeleteMethod="async ()=> await Delete()">
        <MudText Typo="Typo.subtitle1">@instance?.Name</MudText>
        <a href="@($"FilePlugin/management/GetFile/{InstanceId}")">
            <MudChip Icon="@FileMIMEIcons.Get(file.MimeType)" Color="Color.Dark">@file.Filename</MudChip>
        </a>
    </Foreman.PluginManager.Components.InstanceComponent>
}

@code {
    [Parameter]
    public int InstanceId { get; set; }
    [Parameter]
    public EventCallback<Tuple<int,int?>> OnDeleted { get; set; }

    List<Tuple<string, string>> menu = new List<Tuple<string, string>> { new Tuple<string, string>("Edit", "")};
    HttpClient? httpClient;
    Data.FilePluginInstance? instance;
    Foreman.Shared.Data.Courses.ForemanFile file;
    protected override async Task OnInitializedAsync()
    {
        httpClient = http.CreateClient("Foreman.ServerAPI");

        var result = await httpClient.GetAsync($"FilePlugin/management/{InstanceId}");

        if (!result.IsSuccessStatusCode)
        {
            //TODO: Komunikat
            return;
        }
        instance = await result.Content.ReadFromJsonAsync<Data.FilePluginInstance>();

        var result2 = await httpClient.GetAsync($"FilePlugin/management/GetFileInfo/{InstanceId}");
        if (!result2.IsSuccessStatusCode)
        {
            //TODO: Komunikat
            return;
        }
        file = await result2.Content.ReadFromJsonAsync<Foreman.Shared.Data.Courses.ForemanFile>();
    }

    public async Task Delete()
    {
        var result = await httpClient.GetAsync($"/Course/GetModuleInfo/{Config.FilePlugin}/{InstanceId}");
        if(!result.IsSuccessStatusCode)
        {
            return; //Info o bledzie
        }
        var module = Newtonsoft.Json.JsonConvert.DeserializeObject<Foreman.Shared.Data.Courses.CourseModule>(await result.Content.ReadAsStringAsync());
        

        await OnDeleted.InvokeAsync(new Tuple<int,int?>(module.Id,module.CourseSectionId));
    }
}
