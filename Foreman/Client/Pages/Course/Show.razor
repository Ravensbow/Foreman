@page "/course/show/{courseId:int}"
@using Foreman.Shared.Data.Courses
@inject HttpClient Http
@inject Services.AppStateService AppState
@inject IDialogService Dialog

@if (course == null)
{
    <span>Loading...</span>
}
else
{
    @*<h3>@course.FullName</h3>
        @foreach (var module in course.CourseModules ?? new List<CourseModule>())
        {
        <PluginInstance PluginId="module.PluginId.Value" InstanceId="module.InstanceId"></PluginInstance>
        }
        @foreach (var sec in course.CourseSections ?? new List<CourseSection>())
        {
        <h4>@sec.Name</h4>
        <span>@sec.Description</span>

        }*@
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">@course.FullName</MudText>
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudCard Style="height:100%;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Aktywności</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="px-0">
                    <MudList Clickable="false">
                        @foreach (var module in course.CourseModules.Where(x => x.CourseSectionId == null))
                        {
                            <MudListItem>
                                <PluginInstance PluginId="module.PluginId.Value" InstanceId="module.InstanceId" OnDeleted="Delete"></PluginInstance>
                            </MudListItem>
                        }
                        <MudListItem>
                            <div class="d-flex flex-row justify-center">
                                <MudFab @onclick="@((e)=>OpenAddDialog(null))" Color="Color.Primary" StartIcon="@Icons.Filled.Add" Label="Add" />
                            </div>
                        </MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
        @foreach (var sec in course.CourseSections ?? new List<CourseSection>())
        {
            <MudItem xs="12" sm="12" md="12">
                <MudCard Style="height:100%;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@sec.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="px-0">
                        <MudList Clickable="false">
                            @foreach (var module in sec.CourseModules)
                            {
                                <MudListItem>
                                    <PluginInstance PluginId="module.PluginId.Value" InstanceId="module.InstanceId"></PluginInstance>
                                </MudListItem>
                            }
                            <MudListItem>
                                <div class="d-flex flex-row justify-center">
                                    <MudFab @onclick="@((e)=>OpenAddDialog(sec.Id))" Color="Color.Primary" StartIcon="@Icons.Filled.Add" Label="Add" />
                                </div>
                            </MudListItem>
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}


@code {
    [Parameter]
    public int CourseId { get; set; }
    Foreman.Shared.Data.Courses.Course course;

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetAsync("/course/GetCourseById/" + CourseId);
        if (result.IsSuccessStatusCode)
        {
            course = Newtonsoft.Json.JsonConvert.DeserializeObject<Course>(await result.Content.ReadAsStringAsync());
        }
        await AppState.SetBreadcrumbsByCourseCategory(course.Id, true);
    }
    private void OpenAddDialog(int? sectionId)
    {
        var parameters = new DialogParameters();
        parameters.Add("CourseId", CourseId);
        parameters.Add("SectionId", sectionId);
        var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        Dialog.Show<AddModuleDialog>("Add module", parameters, options);
    }
    public void Delete(Tuple<int,int?> ids)
    {
        if (ids.Item2 == null)
            course.CourseModules.Remove(course.CourseModules.SingleOrDefault(x => x.Id == ids.Item1));
        else
            course.CourseSections.SingleOrDefault(x => x.Id == ids.Item2)?.CourseModules.Remove(course.CourseSections.SingleOrDefault(x => x.Id == ids.Item2)?.CourseModules?.SingleOrDefault(x => x.Id == ids.Item1));
    }
}
