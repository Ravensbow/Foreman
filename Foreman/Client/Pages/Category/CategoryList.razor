@inject IHttpClientFactory httpClientFactory
@inject Services.AuthorizeService AuthorizeService
<MudGrid Spacing="5" Justify="Justify.FlexStart" Class="mt-5">
    @foreach (var item in Categorys)
    {
        <MudItem md="6" lg="3" Style="width:100%;">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">@item.Name</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @if (CheckIsManager(item.Id) == true)
                        {
                            <MudMenu Size="Size.Small" Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                                <MudMenuItem>Profile</MudMenuItem>
                                <MudMenuItem>My account</MudMenuItem>
                                <MudMenuItem>Logout</MudMenuItem>
                            </MudMenu>
                        }
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardMedia Image="https://mudblazor.com/images/door.jpg" Height="250" />
                <MudCardContent Style="height:120px !important;">
                    <MudText Typo="Typo.body2">@item.Description</MudText>
                </MudCardContent>
                <MudCardActions Class="justify-end">
                    <MudButton FullWidth="true" Link="@($"/category/show/{item.Id}")" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" Size="Size.Large">Show</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
    @if(canAddCategory == true)
    {
        <MudItem md="6" lg="3" Style="width:100%;position: relative;">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudSkeleton Animation="Animation.Wave" Height="2rem" Width="40%" />
                    </CardHeaderContent>
                    <CardHeaderActions>
                           
                    </CardHeaderActions>
                </MudCardHeader>
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="250px" />
                <MudCardContent Style="height:120px !important;">
                    <MudSkeleton Animation="Animation.Wave" Width="100%" />
                </MudCardContent>
                <MudCardActions Class="justify-end">
                    <MudSkeleton Width="100%" Height="40px" Class="ml-3" />
                </MudCardActions>
                <div style="position: absolute;bottom: 50%;left: 0;right: 0;margin-left: auto;margin-right: auto;" class="d-flex flex-row justify-center">
                    <MudFab Link="@($"/category/add/{CategoryId}")" Color="Color.Primary" StartIcon="@Icons.Filled.Add" Label="Add" Size="Size.Large" />
                </div>
            </MudCard>
        </MudItem>
    }
    
</MudGrid>
@code {
    [Parameter]
    public int? CategoryId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    HttpClient httpClient;
    List<Foreman.Shared.Data.Courses.CourseCategory> Categorys = new List<Foreman.Shared.Data.Courses.CourseCategory>();
    bool? canAddCategory = false;
    protected override async Task OnParametersSetAsync()
    {
        httpClient = httpClientFactory.CreateClient("Foreman.ServerAPI");

        var result = await httpClient.GetAsync($"/course/GetCategorys/{CategoryId}");
        if (!result.IsSuccessStatusCode)
        {
            //TODO Obsluga bledu
            return;
        }
        var temp = await result.Content.ReadAsStringAsync();
        Categorys = await result.Content.ReadFromJsonAsync<List<Foreman.Shared.Data.Courses.CourseCategory>>();
        canAddCategory =  await AuthorizeService.CanAddCourse(CategoryId);
    }
    private bool CheckIsManager(int id)
    {
        var authState = authenticationStateTask.GetAwaiter().GetResult();
        return authState.User.HasClaim("CategoryManager", id.ToString());
    }
}
