@page "/pages/authentication/register"
@layout LoginLayout

@inject HttpClient Http
@inject NavigationManager NavMenager
@using Foreman.Shared.Data.Identity;

<EditForm Model="registerModel" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />
    <MudText Typo="Typo.h4" GutterBottom="true">Sign Up</MudText>
    @if( apiResponse != null && !apiResponse.IsSuccessStatusCode)
    {
        <MudAlert Severity="Severity.Error">Registration Failed! @(!string.IsNullOrEmpty(apiResponse.ReasonPhrase)?apiResponse.ReasonPhrase:"")</MudAlert>
    }
    <MudText>Already have an account? <MudLink Href="/pages/authentication/login">Sign In</MudLink></MudText>

    <MudTextField @bind-Value="@registerModel.FirstName" T="string" Label="First Name" For="@(() => registerModel.FirstName)" Variant="Variant.Outlined" Class="my-4"></MudTextField>

    <MudTextField @bind-Value="@registerModel.LastName" T="string" Label="Last Name" For="@(() => registerModel.LastName)" Variant="Variant.Outlined" Class="my-4"></MudTextField>

    <MudTextField @bind-Value="@registerModel.Email" T="string" Label="E-mail" For="@(() => registerModel.Email)" Variant="Variant.Outlined"></MudTextField>

    <MudTextField @bind-Value="@registerModel.Password" For="@(() => registerModel.Password)" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Class="mt-4"/>

    <MudTextField @bind-Value="@registerModel.ConfirmPassword" For="@(() => registerModel.ConfirmPassword)" Label="Confirm Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" Class="mt-4"/>
    <MudSelect T="Foreman.Shared.Data.Identity.Institution" Label="Institution" @bind-Value="@registerModel.Institution" Class="mt-4" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem Value="@((Institution)null)">None</MudSelectItem>
        @foreach(var item in Institutions)
        {
            <MudSelectItem Value="item">@item.Name</MudSelectItem> 

        }
    </MudSelect>

    <MudCheckBox @bind-Checked="@AgreeToTerms" Label="I agree to the terms and privacy" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>

    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!AgreeToTerms)" Size="Size.Large" FullWidth="true">Register</MudButton>
</EditForm>
@code {
    [Inject]
    public Services.AccountService AccountService { get; set; }
    [Inject]
    public Services.InstitutionService InstitutionService { get; set; }

    public bool AgreeToTerms { get; set; }
    HttpResponseMessage apiResponse;

    Foreman.Shared.Models.Account.RegisterModel registerModel = new Foreman.Shared.Models.Account.RegisterModel();
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    List<Institution> Institutions { get; set; }

    protected override void OnInitialized()
    {
        var result = InstitutionService.GetInstitutions()
        .GetAwaiter()
        .GetResult();

        if (!result.IsSuccessStatusCode)
        {
            return;
        }

        Institutions = result.Content.ReadFromJsonAsync<List<Institution>>().GetAwaiter().GetResult();
    }

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task RegisterUser()
    {
        apiResponse = await AccountService.Register(registerModel);
        if (apiResponse.IsSuccessStatusCode)
            NavMenager.NavigateTo("/pages/authentication/confirm-register/elo", true);
    }
}
