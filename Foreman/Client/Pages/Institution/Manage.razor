@page "/institution/manage/{InstitutionId:int}"
@using Foreman.Shared.Data.Identity
@using Foreman.Client.Services
@attribute [Authorize(Policy = "CanEditInstitution")]
@inject NavigationManager navManager
@inject InstitutionService institutionService;
@inject ISnackbar Snackbar


    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Edit</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <EditForm Model="@Institution" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <CascadingValue Value="@contentLoading">
                            <AddEditPartial Institution="Institution" PotentialOwners="UsersList"></AddEditPartial>
                        </CascadingValue>
                        <MudItem Class="pa-4 mt-4">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                        </MudItem>
                    </EditForm>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <CascadingValue Value="InstitutionId">
            <InstitutionsRequestList Institution="Institution"></InstitutionsRequestList>
            <InstitutionUserList    Institution="Institution"></InstitutionUserList>
    </CascadingValue>


@code {
    [Parameter]
    public int InstitutionId { get; set; }

    public Institution Institution = new Institution();
    public List<UserProfile> UsersList = new List<UserProfile>();
    bool? contentLoading = null;

    protected override async Task OnInitializedAsync()
    {
        contentLoading = true;
        var result = await institutionService.GetInstitution(InstitutionId);
        var result2 = await institutionService.GetPotentialInstitutionManagers();

        if (!result.IsSuccessStatusCode)
        {
            Snackbar.Add("Error occured while receiving institution data.", Severity.Error);
            return;
        }

        if (!result2.IsSuccessStatusCode)
        {
            Snackbar.Add("Error occured while receiving users data.", Severity.Error);
            return;
        }

        Institution = Newtonsoft.Json.JsonConvert.DeserializeObject<Institution>(await result.Content.ReadAsStringAsync());
        UsersList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<UserProfile>>(await result2.Content.ReadAsStringAsync());
        contentLoading = false;
    }

    private async Task OnValidSubmit()
    {
        var result = await institutionService.EditInstitution(Institution);

        if (!result.IsSuccessStatusCode)
        {
            Snackbar.Add("Error occured while sumbitting edit form.", Severity.Error);
            return;
        }

        Snackbar.Add("Successfuly edited entity!", Severity.Success);
        navManager.NavigateTo("/institution/institutionList");
    }
}
