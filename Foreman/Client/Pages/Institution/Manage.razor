@page "/institution/manage/{InstitutionId:int}"
@using Foreman.Shared.Data.Identity
@using Foreman.Client.Services
@attribute [Authorize(Policy = "CanEditInstitution")]
@inject NavigationManager navManager
@inject InstitutionService institutionService;
@inject ISnackbar Snackbar

if(institution == null)
{
    <span>Loading...</span>
}
else if (!string.IsNullOrEmpty(errString))
{
    <span>Exception: @errString</span>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Edit</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <EditForm Model="Institution" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <AddEditPartial Institution="Institution"></AddEditPartial>
                        <MudPaper Class="pa-4 mt-4">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                        </MudPaper>
                    </EditForm>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <CascadingValue Value="InstitutionId">
            <InstitutionsRequestList Institution="Institution"></InstitutionsRequestList>
            <InstitutionUserList    Institution="Institution"></InstitutionUserList>
    </CascadingValue>

}

@code {
    [Parameter]
    public int InstitutionId { get; set; }

    public Institution Institution { get; set; }

    string errString = "";
    protected override async Task OnInitializedAsync()
    {
        var result = await institutionService.GetInstitution(InstitutionId);

        if (!result.IsSuccessStatusCode)
        {
            Snackbar.Add("Error occured while receiving institution data.", Severity.Error);
            errString = result.ReasonPhrase;
            return;
        }

        Institution = Newtonsoft.Json.JsonConvert.DeserializeObject<Institution>(await result.Content.ReadAsStringAsync());
    }

    private async Task OnValidSubmit()
    {
        var result = await institutionService.EditInstitution(Institution);

        if (!result.IsSuccessStatusCode)
        {
            Snackbar.Add("Error occured while sumbitting edit form.", Severity.Error);
            return;
        }

         result = await institutionService.GetInstitution(InstitutionId);

        if (!result.IsSuccessStatusCode)
        {
            Snackbar.Add("Error.", Severity.Error);
            return;
        }

        Institution = Newtonsoft.Json.JsonConvert.DeserializeObject<Institution>(await result.Content.ReadAsStringAsync());
    }
}
